#!/usr/bin/env python

from optparse import OptionParser
import batchsubmit
from pytools.tools import lazy_chunk
import itertools
from subprocess import CalledProcessError

__SUPPORTED_BACKENDS = set(['SGE', 'SGEWQ'])


def get_opts():
    usage = '%prog [OPTIONS] <data file> command'

    p = OptionParser(usage=usage)

    p.add_option('-b','--backend',dest='backend',default='SGE',help='Specify which backend to use [%s]' % '|'.join(__SUPPORTED_BACKENDS))
    p.add_option('-w','--with-env',dest='withenv',default=None,help='Environment wrapper [None]')
    p.add_option('-e','--good-env',dest='goodenv',default=None,help='Environment to source [None]')
    p.add_option('-c','--chunksize',dest='chunksize',type=int,default=1,help='Chunksize [1]')

    p.add_option('-P','--poll-interval',dest='poll',default='1m',
                 help='<value><unit> where <unit> is one of {s,m,h,d,w} [1m]')
    p.add_option('-M','--max-tries',dest='maxtries',type=float,default=float('inf'),
                 help='Maximum number of times to poll [infinity]')

    p.add_option('-W','--wait',dest='wait',action='store_true',help='Wait for the batch job to complete before exiting')


    opts, args    = p.parse_args()

    if opts.backend not in __SUPPORTED_BACKENDS:
        p.error('Unsupported backend: %s' % opts.backend)

    if len(args) < 2:
        p.error('Did you forget the <data file> and <command> ?')

    if \
            (not opts.withenv and opts.goodenv) or \
            (opts.withenv and not opts.goodenv):
        p.error('I need both --withenv and --goodenv')

    opts.datafile = args[0]
    opts.command  = args[1:]

    return opts


def make_commands(cmd, datafile, chunksize):
    with open(datafile) as fd:
        for chunk in lazy_chunk(itertools.imap(str.strip, fd),
                               chunksize):
            yield ' '.join(cmd + chunk)



def maybe_kill_job(backend):
    while True:
        usr_input = raw_input('Job is still running. Kill it? [y/N]: ').lower()
        if not usr_input:
            kill = False
            break
        elif usr_input == 'y':
            kill = True
            break
        else:
            print 'Unknown choice:', usr_input

    if kill:
        jid     = backend.running_job_id
        success = backend.stop()
        print 'Killed SGE job', jid

    return kill


def maybe_resubmit_job(backend):
    while True:
        usr_input = raw_input('Resubmit job? [Y/n]: ').lower()
        if not usr_input or usr_input == 'y':
            resub = True
            break
        elif usr_input == 'n':
            resub = False
            break
        else:
            print 'Unknown choice', usr_input
    if resub:
        backend.resubmit()

    return resub

def main():
    opts = get_opts()

    backend = {'SGE' : batchsubmit.SGE,
               'SGEWQ' : batchsubmit.SGEWorkQueue
               }[opts.backend](withenv=opts.withenv,
                               environment=opts.goodenv)

    commands = make_commands(opts.command, opts.datafile, opts.chunksize)

    try:
        backend.submit(commands)
    except CalledProcessError, e:
        print 'Could not submit job:', e

    if opts.wait:

        while True:
            try:
                backend.wait(poll_interval=opts.poll,
                             max_tries=opts.maxtries)
                break
            except KeyboardInterrupt:
                if backend.is_job_running():
                    maybe_kill_job(backend)

                if not maybe_resubmit_job(backend):
                    break


if __name__ == '__main__':
    main()
